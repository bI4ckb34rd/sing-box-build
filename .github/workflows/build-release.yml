name: Build and Release sing-box

on:
  workflow_dispatch:
    inputs:
      version:
        description: "sing-box version to build (e.g., v1.11.4)"
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows, linux]
        tags: ["default", "all"]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout sing-box
        uses: actions/checkout@v3
        with:
          repository: SagerNet/sing-box
          ref: ${{ github.event.inputs.version }}

      # Step 2: Set up Go environment
      - name: Determine Go version
        id: go-version
        run: |
          if echo "${{ github.event.inputs.version }}" | grep -q 'v1.9'; then
            echo "go_version=1.18.5" >> $GITHUB_ENV
          elif echo "${{ github.event.inputs.version }}" | grep -q 'v1.10'; then
            echo "go_version=1.20.0" >> $GITHUB_ENV
          elif echo "${{ github.event.inputs.version }}" | grep -q 'v1.11'; then
            echo "go_version=1.23.1" >> $GITHUB_ENV
          else
            echo "go_version=1.23.1" >> $GITHUB_ENV
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.go_version }}

      # Step 3: Define build tags
      - name: Define build tags
        id: build-tags
        run: |
          if [ "${{ matrix.tags }}" == "default" ]; then
            echo "tags=with_gvisor,with_reality_server,with_quic,with_utls,with_ech,with_dhcp,with_wireguard,with_acme,with_clash_api" >> $GITHUB_ENV
          else
            echo "tags=with_gvisor,with_reality_server,with_quic,with_utls,with_ech,with_dhcp,with_wireguard,with_acme,with_clash_api,with_v2ray_api,with_grpc" >> $GITHUB_ENV
          fi

      # Step 4: Build sing-box
      - name: Build sing-box
        run: |
          GOOS=${{ matrix.os }} GOARCH=amd64 go build -tags "${{ env.tags }}" -o sing-box-${{ matrix.os }}-${{ matrix.tags }} ./cmd/sing-box

      # Step 5: Archive the binary
      - name: Archive binary
        run: |
          if [ "${{ matrix.os }}" == "windows" ]; then
            zip sing-box-${{ matrix.os }}-${{ matrix.tags }}.zip sing-box-${{ matrix.os }}-${{ matrix.tags }}
          else
            tar -czf sing-box-${{ matrix.os }}-${{ matrix.tags }}.tar.gz sing-box-${{ matrix.os }}-${{ matrix.tags }}
          fi

      # Step 6: Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sing-box-${{ matrix.os }}-${{ matrix.tags }}
          path: sing-box-${{ matrix.os }}-${{ matrix.tags }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: my-artifact-*
          merge-multiple: true

      # Step 2: Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      # Step 3: Upload release assets
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/artifacts/sing-box-${{ matrix.os }}-${{ matrix.tags }}.*
          asset_name: sing-box-${{ matrix.os }}-${{ matrix.tags }}.*
          asset_content_type: application/octet-stream
